

### üî¢ 1. **Elemek megsz√°ml√°l√°sa (Count)**

Megsz√°molja, hogy h√°ny elem felel meg egy adott felt√©telnek.

```csharp
var darab = list.Where(x => x.vmi != null).Count();
// R√∂videbben:
var darab = list.Count(x => x.vmi != null);
```

---

### üìä 2. **√Åtlag sz√°m√≠t√°sa (Average)**

Kisz√°molja a megadott tulajdons√°g (pl. `Eredmeny`) √°tlag√°t, csak azokra, amelyek megfelelnek a felt√©telnek.

```csharp
var atlag = list.Where(x => x.vmi).Average(x => x.Eredmeny);
```

---

### üóÇÔ∏è 3. **Csoportos√≠t√°s √©s Dictionary k√©sz√≠t√©s (GroupBy + ToDictionary)**

Elemeket kulcs szerint csoportos√≠t, √©s a csoportokat sz√≥t√°rba rendezve visszaadja.

```csharp
var dict = list
    .GroupBy(x => x.vmi)
    .ToDictionary(g => g.Key, g => g.Count());
```

Ez p√©ld√°ul megsz√°molja, hogy az egyes `vmi` √©rt√©kek h√°nyszor fordulnak el≈ë.

---

### üîΩ 4. **Minimum √©rt√©k keres√©se (OrderBy ‚Üí First)**

Megkeresi azt az elemet, amelyn√©l a `vmi` √©rt√©k a legkisebb.

```csharp
var minElem = list.OrderBy(x => x.vmi).First();
```

Alternat√≠v megold√°s:

```csharp
var minErtek = list.Min(x => x.vmi);
var minElem = list.First(x => x.vmi == minErtek);
```

---

### üîº 5. **Maximum √©rt√©k keres√©se (OrderByDescending ‚Üí First)**

Megkeresi azt az elemet, amelyn√©l a `vmi` √©rt√©k a legnagyobb.

```csharp
var maxElem = list.OrderByDescending(x => x.vmi).First();
```

Alternat√≠v megold√°s:

```csharp
var maxErtek = list.Max(x => x.vmi);
var maxElem = list.First(x => x.vmi == maxErtek);
```

---

### üîç 6. **Keres√©s adott √©rt√©kre (Where, FirstOrDefault)**

Megkeresi az els≈ë olyan elemet, amely egy adott √©rt√©ket tartalmaz.

```csharp
var talalat = list.FirstOrDefault(x => x.vmi == "***");
```

Ha biztosak vagyunk abban, hogy l√©tezik ilyen elem, akkor `First()` is haszn√°lhat√≥:

```csharp
var talalat = list.First(x => x.vmi == "***");
```

---

### ‚ûï **Extra: T√∂mb elemeinek egyes√≠t√©se (Join/Select + String.Join)**

Haszn√°lhat√≥ p√©ld√°ul stringek √∂sszeilleszt√©s√©re:

```csharp
var osszesNev = string.Join(", ", list.Select(x => x.Nev));
```

---

### ‚ûï **Extra: Egyedis√©g kiv√°laszt√°sa (Distinct)**

Kiv√°lasztja az egyedi `vmi` √©rt√©keket.

```csharp
var egyediek = list.Select(x => x.vmi).Distinct().ToList();
```

---

### ‚ûï **Extra: T√∂bb felt√©tel kombin√°l√°sa**

```csharp
var szurt = list
    .Where(x => x.vmi != null && x.Eredmeny > 50)
    .OrderBy(x => x.Eredmeny)
    .ToList();
```

---

### √ñsszefoglal√°s ‚Äì LINQ el≈ënyei:

* T√∂m√∂r, olvashat√≥ k√≥d.
* K√∂nnyen kombin√°lhat√≥ sz≈±r√©s, rendez√©s, csoportos√≠t√°s.
* Er≈ëteljes eszk√∂z komplex adatm≈±veletek egyszer≈± megval√≥s√≠t√°s√°ra.

---

